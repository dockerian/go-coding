/* ************************************************************ * Source: Matrix.cs * System: Microsoft Windows with .NET Framework * ************************************************************ */using System;using System.Collections.Generic;using Common.Extensions;using Common.Library;namespace Coding.Interviews{  /*//    Given matrix MxN of 0s and 1s, output all groups of adjacent 1s in form of      SetID: (row,col)...    1s are considered adjacent if they are adjacent horizontally or vertically.    1 1 0 1 0 1    1 1 1 1 0 1    0 0 0 0 1 1    1 0 1 0 1 0    Output:    A: (0,0)(0,1)(0,3)(0,5)    B: (1,0)(1,1)(1,2)(1,3)(1,5)    C: (2,4)(2,5)    D: (3,4)  //*/  public class Coordinate  {    public Coordinate(uint x, uint y)    {      X = x;      Y = y;    }    public uint X { get; set; }    public uint Y { get; set; }  }  public class IntMatrix  {    private int _rows = 0;    private int _columns = 0;    private int[,] _matrix;    public IntMatrix(int rows, int columns)    {      this._rows = rows;      this._columns = columns;      this._matrix = new int[_rows, _columns];    }    public IntMatrix(int[,] matrix)    {      this._rows = matrix.GetLength(0);      this._columns = matrix.GetLength(1);      this._matrix = new int[_rows, _columns];      for (var x = 0; x < this._rows; x++)      {        for (var y = 0; y < this._columns; y++)        {          _matrix[x, y] = matrix[x, y];        }      }    }    public IEnumerable<Coordinate> FindAjacent1s()    {      bool[,] marker = new bool[this._rows, this._columns];      List<Coordinate> result = new List<Coordinate>();      for (var x = 0; x < this._rows; x++)      {        for (var y = 0; y < this._columns; y++)        {          if (!marker[x, y] && _matrix[x, y] == 1)          {            if (x > 0 && _matrix[x - 1, y] == 1)            {              this.AddResult(x, y, marker, result);              this.AddResult(x - 1, y, marker, result);            }            if (y > 0 && _matrix[x, y - 1] == 1)            {              this.AddResult(x, y, marker, result);              this.AddResult(x, y - 1, marker, result);            }            if (x < this._rows-1 && _matrix[x + 1, y] == 1)            {              this.AddResult(x, y, marker, result);              this.AddResult(x + 1, y, marker, result);            }            if (y < this._columns-1 && _matrix[x, y + 1] == 1)            {              this.AddResult(x, y, marker, result);              this.AddResult(x, y + 1, marker, result);            }          }        }      }      return result;    }    private void AddResult(int x, int y, bool[,] marker, List<Coordinate> result)    {      if (!marker[x, y])      {        result.Add(new Coordinate((uint)x, (uint)y));        marker[x, y] = true;      }    }    /*//    ////        x-1,y    //// x,y-1  (x,y)  x,y+1    ////        x+1,y    //*/    private bool IsAjacent1s(int x, int y)    {      return        this.IsInMatrix(x - 1, y) && _matrix[x - 1, y] == 1 ||        this.IsInMatrix(x, y - 1) && _matrix[x, y - 1] == 1 ||        this.IsInMatrix(x + 1, y) && _matrix[x + 1, y] == 1 ||        this.IsInMatrix(x, y + 1) && _matrix[x, y + 1] == 1;    }    private bool IsInMatrix(int x, int y)    {      return x >= 0 && x < _rows && y >= 0 && y < _columns;    }  }}// namespace Coding.App.Interviews